name:
  pkp-github-actions
inputs:
  application:
    required: false
  repository:
    required: false
  branch:
     required: false
  test:
    default: true
    required: false
  upgrade:
    default: false
    required: false
  upgrade_test:
    required: false
  node_version:
    default: 20
  reset_commit:
    required: false
  dataset_branch:
    required: false
  DEBUG_IN_TMATE:
    required: false
  DATASETS_ACCESS_KEY:
    required: false

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4
      with:
        repository: 'pkp/pkp-github-actions'
        path: pkp-github-actions
        ref: v1
    - name: Install postgres server
      if: ${{matrix.database == 'pgsql'}}
      run: |
        sudo apt install postgresql-14 postgresql-contrib
        sudo dpkg-reconfigure locales
        sudo sed -i -E 's\peer|scram-sha-256\trust\g' /etc/postgresql/14/main/pg_hba.conf
      shell: bash


    - name: Install mysql server
      if: ${{matrix.database == 'mysql'}}
      run: |
        sudo apt install -q -y mysql-server mysql-client
        sudo service mysql start
        sudo mysqladmin -u root -p'root' password ''
      shell: bash

    - name: Install mariadb server
      if: ${{matrix.database == 'mariadb'}}
      uses: ankane/setup-mariadb@v1
      with:
        mariadb-version: "10.11"


    - name: Install php environment
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{matrix.php-version}}
        extensions: bcmath, bz2, curl, gd, intl, mbstring, mysql,mysqlnd, mysqli, opcache, pdo_mysql, pgsql, json,soap, xml, zip
        coverage: xdebug
      env:
        update: true

    - name: Install PKP application for push
      if: ${{  github.event_name  == 'push' &&      (inputs.repository == '' && inputs.application == '' && inputs.branch == '')}}
      run: |
       git clone -b ${{ github.head_ref || github.ref_name }} https://github.com/${{ github.repository}} ~/${{ github.event.repository.name }}  --depth 2
      shell: bash

    - name: Install PKP application for pull_request
      if:  ${{github.event_name  == 'pull_request' &&    (inputs.repository == '' && inputs.application == '' && inputs.branch == '')}}
      run: |
        git clone -b ${{ github.event.pull_request.head.ref}} ${{ github.event.pull_request.head.repo.html_url}} ~/${{ github.event.pull_request.head.repo.name }} --depth 2
      shell: bash

    - name: Install current application for  external plugins and pkp-lib for push and pull_request
      if:  ${{  inputs.repository != '' && inputs.application != '' && inputs.branch != ''}}
      run: |
        git clone -b ${{inputs.branch}} https://github.com/${{inputs.repository}}/${{inputs.application}} ~/${{inputs.application}} --depth 2
      shell: bash

    - name: Reset to a specific commit
      if:  ${{ inputs.reset_commit}}
      run: |
        cd ~/${{inputs.application || github.event.pull_request.head.repo.name || github.event.repository.name }}
        git reset --hard  ${{  inputs.reset_commit}}
        echo ":bulb: Reset to commit ${{  inputs.reset_commit}}"
      shell: bash

    - name: Install  Submodules
      run: |
        cd ~/${{inputs.application || github.event.pull_request.head.repo.name || github.event.repository.name  }}
        git submodule update --init --recursive

      shell: bash

    - name : Checkout for  pkp-lib for Push
      if: ${{  github.event_name  == 'push' && github.event.repository.name =='pkp-lib'}}
      run:  |
        cd ~/${{inputs.application}}/lib/pkp
        git remote add ${{ github.event.repository.full_name}} https://github.com/${{ github.repository}}
        git fetch ${{ github.event.repository.full_name}} ${{github.ref_name}}
        git checkout ${{ github.event.repository.full_name}}/${{github.ref_name}}
      shell: bash

    - name: Checkout for  pkp-lib for Pull_request
      if: ${{  github.event_name  == 'pull_request' && github.event.repository.name =='pkp-lib'}}
      run: |
        cd ~/${{inputs.application}}/lib/pkp
        git remote add ${{ github.event.pull_request.head.repo.full_name}}   ${{ github.event.pull_request.head.repo.html_url}} 
        git fetch ${{ github.event.pull_request.head.repo.full_name}}  ${{ github.event.pull_request.head.ref}}
        git checkout ${{ github.event.pull_request.head.repo.full_name}}/${{ github.event.pull_request.head.ref}}
      shell: bash
      env:
        APPLICATION: ${{inputs.application || github.event.pull_request.head.repo.name || github.event.repository.name }}

    - name: Install  dependencies
      run: |
        cd ~/${{inputs.application || github.event.repository.name }}
         ${{ github.workspace }}/pkp-github-actions/.github/actions/install-dependencies.sh
      env:
        NODE_VERSION: ${{inputs.node_version}}
      shell: bash

    - name: Create additional directories
      run: mkdir -p ~/bin
      shell: bash

    - name: Install validation tools
      if: ${{ matrix.validate == 'true'}}
      run: |
        cd ~/${{inputs.application || github.event.repository.name }}
         ${{ github.workspace }}/pkp-github-actions/.github/actions/install-validation-tools.sh
      shell: bash


    - name: Run XML validation
      if: ${{ matrix.validate == 'true'}}
      id: validation
      run: |
        start_time=$(date -u +%s)
        echo "status=:red_circle:" >> $GITHUB_OUTPUT
        cd ~/${{inputs.application || github.event.repository.name }}
        ${{ github.workspace }}/pkp-github-actions/.github/actions/validate-xml.sh
        ${{ github.workspace }}/pkp-github-actions/.github/actions/buildjs.sh -n
        ${{ github.workspace }}/pkp-github-actions/.github/actions/validate-json.sh
        npm run lint
        ${{ github.workspace }}/pkp-github-actions/.github/actions/run-document-validation.sh
        duration=$(date -d@$(($(date -u +%s) - $start_time)) -u +%H:%M:%S) 
        echo "duration=$duration" >> $GITHUB_OUTPUT
        echo "status=:white_check_mark:" >> $GITHUB_OUTPUT
      shell: bash

    - name:  Run  HTTP Server
      if: ${{ matrix.test == 'true'}}
      run: |
        cd ~/${{inputs.application || github.event.repository.name }} 
        ${{ github.workspace }}/pkp-github-actions/.github/actions/run-http-server.sh
      shell: bash

    - name: Prepare test environment
      if: ${{ matrix.test == 'true'}}
      run: |
        cd ~/${{inputs.application || github.event.repository.name }} 
        ${{ github.workspace }}/pkp-github-actions/.github/actions/prepare-tests.sh
      shell: bash
      env:
        APPLICATION: ${{inputs.application || github.event.repository.name}}
        TEST: ${{matrix.database}}

    - name: Run  data integration tests
      id: data-integration-tests
      if: ${{ matrix.test == 'true'}}
      run: |
        start_time=$(date -u +%s)
        echo "status=:red_circle:" >> $GITHUB_OUTPUT
        cd ~/${{inputs.application || github.event.repository.name }}
        ${{ github.workspace }}/pkp-github-actions/.github/actions/run-data-integration-tests.sh
        duration=$(date -d@$(($(date -u +%s) - $start_time)) -u +%H:%M:%S) 
        echo "duration=$duration" >> $GITHUB_OUTPUT
        echo "status=:white_check_mark:" >> $GITHUB_OUTPUT
      shell: bash
      env:
        APPLICATION: ${{inputs.application || github.event.repository.name}}
        BASEURL: http://localhost
        CYPRESS_DBTYPE: ${{matrix.database=='pgsql' && 'PostgreSQL' || 'MySQLi'}}
        NODE_VERSION: ${{inputs.node_version}}


    - name: Dump database
      if: ${{ inputs.dataset_branch != '' &&  github.event_name  == 'push' && matrix.SAVE_BUILD}}
      run: |
        cd ~/${{inputs.application || github.event.repository.name }}
        ${{ github.workspace }}/pkp-github-actions/.github/actions/dump-database.sh
      shell: bash
      env:
        APPLICATION: ${{inputs.application || github.event.repository.name}}
        DBTYPE: ${{matrix.database=='pgsql' && 'PostgreSQL' || 'MySQLi'}}

    - name: Upload datasets
      if: ${{ inputs.dataset_branch != '' &&  github.event_name  == 'push' && matrix.SAVE_BUILD}}
      run: |
        cd ~/${{inputs.application || github.event.repository.name }}
        ${{ github.workspace }}/pkp-github-actions/.github/actions/upload-to-datasets-repository.sh
        

      shell: bash
      env:
        APPLICATION: ${{inputs.application || github.event.repository.name}}
        TEST: ${{matrix.database}}
        DATASET_BRANCH: ${{inputs.dataset_branch}}
        DATASETS_ACCESS_KEY: ${{inputs.DATASETS_ACCESS_KEY}}

    - name: Run  pkp-lib integration tests
      id: pkp-lib-and-plugin-integration-tests
      if: ${{ matrix.test == 'true'}}
      run: |
        start_time=$(date -u +%s)
        echo "status=:red_circle:" >> $GITHUB_OUTPUT
        cd ~/${{inputs.application || github.event.repository.name }}
        ${{ github.workspace }}/pkp-github-actions/.github/actions/run-pkp-lib-and-plugin-integration-tests.sh
        duration=$(date -d@$(($(date -u +%s) - $start_time)) -u +%H:%M:%S) 
        echo "duration=$duration" >> $GITHUB_OUTPUT
        echo "status=:white_check_mark:" >> $GITHUB_OUTPUT
      shell: bash
      env:
        APPLICATION: ${{inputs.application || github.event.repository.name}}
        BASEURL: http://localhost
        CYPRESS_DBTYPE: ${{matrix.database=='pgsql' && 'PostgreSQL' || 'MySQLi'}}
        NODE_VERSION: ${{inputs.node_version}}

    - name: Run unit tests
      id: unit-test
      if: ${{ matrix.test == 'true' }}
      run: |
        start_time=$(date -u +%s)
        echo "status=:red_circle:" >> $GITHUB_OUTPUT
        cd ~/${{inputs.application || github.event.repository.name }} 
        
        ${{ github.workspace }}/pkp-github-actions/.github/actions/run-unit-tests.sh -CcPpdR
        ${{ github.workspace }}/pkp-github-actions/.github/actions/run-unit-tests.sh -CcPpd
        
        
        duration=$(date -d@$(($(date -u +%s) - $start_time)) -u +%H:%M:%S) 
        echo "duration=$duration" >> $GITHUB_OUTPUT
        echo "status=:white_check_mark:" >> $GITHUB_OUTPUT
      shell: bash
      env:
        TEST: ${{matrix.database}}
        APPLICATION: ${{inputs.application || github.event.repository.name}}
        DB TYPE: ${{matrix.database == 'pgsql' && 'PostgreSQL' || 'MySQLi'}}
        NODE_VERSION: ${{inputs.node_version}}

    - name: Download datasets
      if: ${{  github.event_name  == 'pull_request' &&  matrix.upgrade== 'true'}}
      run: |
        cd ~/${{inputs.application || github.event.repository.name }} 
        git clone https://github.com/pkp/datasets --depth 1
      shell: bash
      env:
        DATABASEDUMP: database.sql.gz
        DBTYPE: ${{matrix.database == 'pgsql' && 'PostgreSQL' || 'MySQLi'}}
        FILESDUMP: files.tar.gz

    - name: Run upgrade tests
      id: upgrade
      if: ${{  github.event_name  == 'push'  &&  matrix.upgrade== 'true' && matrix.upgrade_test != '' && (matrix.database == 'pgsql' || matrix.database == 'mysql' ) && (matrix.php-version == '8.1')}}
      run: |
        start_time=$(date -u +%s)
        cd ~/${{inputs.application || github.event.repository.name }}
        IFS=',' read -ra DATASET_BRANCHES <<< "${{matrix.upgrade_test}}"
        for DATASET_BRANCH in "${DATASET_BRANCHES[@]}"
        do
          source  ${{ github.workspace }}/pkp-github-actions/.github/actions/prepare-tests.sh
          ${{ github.workspace }}/pkp-github-actions/.github/actions/upgrade-pkp-application.sh
         
        done
        duration=$(date -d@$(($(date -u +%s) - $start_time)) -u +%H:%M:%S) 
        echo "duration=$duration" >> $GITHUB_OUTPUT
        echo "status=:white_check_mark:" >> $GITHUB_OUTPUT
      env:
        APPLICATION: ${{inputs.application || github.event.repository.name}}
        DATASET_BRANCH: ${DATASET_BRANCH}
        DBTYPE: ${{matrix.database == 'pgsql' && 'PostgreSQL' || 'MySQLi'}}
        TEST: ${{matrix.database}}
      shell: bash

    - name: Print summary
      if: always()
      run: |
        cd ~/$APPLICATION
        {
          echo "#### Tests"
          echo " |Step |Status |:clock4: |"
          echo "| --- | --- | --- |"
          echo "|  Validation | ${{steps.validation.outputs.status}} |${{steps.validation.outputs.duration}} |"
          echo "|  Cypress data integration tests | ${{steps.data-integration-tests.outputs.status}} |${{steps.data-integration-tests.outputs.duration}} |"
          echo "|  Cypress integration tests | ${{steps.pkp-lib-and-plugin-integration-tests.outputs.status}} |${{steps.pkp-lib-and-plugin-integration-tests.outputs.duration}} |"
          echo "|  Unit test | ${{steps.unit-test.outputs.status}} |${{steps.unit-test.outputs.duration}} |"
          echo "|  Upgrade | ${{steps.upgrade.outputs.status}}|${{steps.upgrade.outputs.duration}} |"
          echo "#### System information"
          echo " | OS  |PHP| DB|  Node |  "
          echo "| ---| --- | ---- | --- |"
          echo "|  :penguin: ${{runner.os}} ${{runner.arch}}   $( lsb_release -i | cut -c 17-) $( lsb_release -c | cut -c 11-) $( lsb_release -r | cut -c 10-)   | ${{matrix.php-version}} | ${{matrix.database}} |  ${{inputs.node_version}} |"
        
      
      
        } >> $GITHUB_STEP_SUMMARY
      shell: bash
      env:
        APPLICATION: ${{inputs.application || github.event.pull_request.head.repo.name || github.event.repository.name }}


    - uses: actions/upload-artifact@v4
      if: failure()
      with:
       name: cypress-${{matrix.database }}-${{ matrix.php-version }}
       path: ~/${{ inputs.application || github.event.repository.name }}/cypress/screenshots
       if-no-files-found: ignore
       overwrite: false
    - uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: ${{matrix.database }}-${{ matrix.php-version }}-http-access.log
        path: ~/${{ inputs.application || github.event.repository.name }}/access.log
        overwrite: false

    - name: Setup tmate session
      if: ${{ failure() && inputs.DEBUG_IN_TMATE == 'true' }}
      uses: mxschmitt/action-tmate@v3

